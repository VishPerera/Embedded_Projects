
blinkyled_struct_bitfield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000016c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  4 .ARM          00000000  08000344  08000344  0001034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000344  0800034c  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800034c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800034c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0001034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000486  00000000  00000000  00010376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000df  00000000  00000000  000107fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  000108e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000030  00000000  00000000  00010928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f32  00000000  00000000  00010958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000044a  00000000  00000000  0001188a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003c34  00000000  00000000  00011cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00015908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00015958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000000 	.word	0x20000000
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800032c 	.word	0x0800032c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000004 	.word	0x20000004
 8000214:	0800032c 	.word	0x0800032c

08000218 <main>:

#include <stdint.h>
#include "memory_mapped.h"

int main(void)
{
 8000218:	b480      	push	{r7}
 800021a:	b087      	sub	sp, #28
 800021c:	af00      	add	r7, sp, #0
	// --- Defining Register Addresses ---
	RCC_AHB1EN_R_t volatile *const pClkCtrl_Reg     = (RCC_AHB1EN_R_t*)  0x40023830;
 800021e:	4b18      	ldr	r3, [pc, #96]	; (8000280 <main+0x68>)
 8000220:	60fb      	str	r3, [r7, #12]
	GPIOx_MODE_R_t volatile *const pPortB_Mode_Reg  = (GPIOx_MODE_R_t*)  0x40020400;
 8000222:	4b18      	ldr	r3, [pc, #96]	; (8000284 <main+0x6c>)
 8000224:	60bb      	str	r3, [r7, #8]
	GPIOx_OD_R_t   volatile *const pPortB_Out_Reg   = (GPIOx_OD_R_t*)    0x40020414;
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <main+0x70>)
 8000228:	607b      	str	r3, [r7, #4]

	//1. enable the clock for GPOIB peripheral in the AHB1ENR (SET bit 1 position)
	pClkCtrl_Reg -> gpiob_en = 1;
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	6813      	ldr	r3, [r2, #0]
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6013      	str	r3, [r2, #0]

	//2. configure the mode of the IO pin as output
	pPortB_Mode_Reg -> pin_0 = 1;
 8000234:	68ba      	ldr	r2, [r7, #8]
 8000236:	6813      	ldr	r3, [r2, #0]
 8000238:	2101      	movs	r1, #1
 800023a:	f361 0301 	bfi	r3, r1, #0, #2
 800023e:	6013      	str	r3, [r2, #0]

	while(1)
	{
		// 3. Set bit 0 to high to turn on PB0 Green LED
		pPortB_Out_Reg -> pin_0  = 1;
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	6813      	ldr	r3, [r2, #0]
 8000244:	f043 0301 	orr.w	r3, r3, #1
 8000248:	6013      	str	r3, [r2, #0]

		// Add a small software delay. Loop for 300k times
		for(uint32_t i=0 ; i < 300000 ; i++ );
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	e002      	b.n	8000256 <main+0x3e>
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	3301      	adds	r3, #1
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	4a0c      	ldr	r2, [pc, #48]	; (800028c <main+0x74>)
 800025a:	4293      	cmp	r3, r2
 800025c:	d9f8      	bls.n	8000250 <main+0x38>

		// 4. Clear bit 0 to high to turn off PB0 Green LED
		pPortB_Out_Reg -> pin_0  = 0;
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	6813      	ldr	r3, [r2, #0]
 8000262:	f36f 0300 	bfc	r3, #0, #1
 8000266:	6013      	str	r3, [r2, #0]

		for(uint32_t i=0 ; i < 300000 ; i++ );
 8000268:	2300      	movs	r3, #0
 800026a:	613b      	str	r3, [r7, #16]
 800026c:	e002      	b.n	8000274 <main+0x5c>
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	3301      	adds	r3, #1
 8000272:	613b      	str	r3, [r7, #16]
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <main+0x74>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d9f8      	bls.n	800026e <main+0x56>
		pPortB_Out_Reg -> pin_0  = 1;
 800027c:	e7e0      	b.n	8000240 <main+0x28>
 800027e:	bf00      	nop
 8000280:	40023830 	.word	0x40023830
 8000284:	40020400 	.word	0x40020400
 8000288:	40020414 	.word	0x40020414
 800028c:	000493df 	.word	0x000493df

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 f811 	bl	80002e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ffa9 	bl	8000218 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	0800034c 	.word	0x0800034c
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <__libc_init_array>:
 80002e4:	b570      	push	{r4, r5, r6, lr}
 80002e6:	4d0d      	ldr	r5, [pc, #52]	; (800031c <__libc_init_array+0x38>)
 80002e8:	4c0d      	ldr	r4, [pc, #52]	; (8000320 <__libc_init_array+0x3c>)
 80002ea:	1b64      	subs	r4, r4, r5
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	2600      	movs	r6, #0
 80002f0:	42a6      	cmp	r6, r4
 80002f2:	d109      	bne.n	8000308 <__libc_init_array+0x24>
 80002f4:	4d0b      	ldr	r5, [pc, #44]	; (8000324 <__libc_init_array+0x40>)
 80002f6:	4c0c      	ldr	r4, [pc, #48]	; (8000328 <__libc_init_array+0x44>)
 80002f8:	f000 f818 	bl	800032c <_init>
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	10a4      	asrs	r4, r4, #2
 8000300:	2600      	movs	r6, #0
 8000302:	42a6      	cmp	r6, r4
 8000304:	d105      	bne.n	8000312 <__libc_init_array+0x2e>
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f855 3b04 	ldr.w	r3, [r5], #4
 800030c:	4798      	blx	r3
 800030e:	3601      	adds	r6, #1
 8000310:	e7ee      	b.n	80002f0 <__libc_init_array+0xc>
 8000312:	f855 3b04 	ldr.w	r3, [r5], #4
 8000316:	4798      	blx	r3
 8000318:	3601      	adds	r6, #1
 800031a:	e7f2      	b.n	8000302 <__libc_init_array+0x1e>
 800031c:	08000344 	.word	0x08000344
 8000320:	08000344 	.word	0x08000344
 8000324:	08000344 	.word	0x08000344
 8000328:	08000348 	.word	0x08000348

0800032c <_init>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr

08000338 <_fini>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr
